// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton/test/presentation/pages/tv_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:ditonton/presentation/bloc/tv_detail_bloc.dart' as _i2;
import 'package:ditonton/presentation/bloc/tv_detail_recommendations_bloc.dart'
    as _i4;
import 'package:ditonton/presentation/bloc/tv_detail_watchlist_bloc.dart'
    as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTVDetailState_0 extends _i1.Fake implements _i2.TVDetailState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeTVDetailRecommendationsState_2 extends _i1.Fake
    implements _i4.TVDetailRecommendationsState {}

class _FakeTVDetailWatchlistState_3 extends _i1.Fake
    implements _i5.TVDetailWatchlistState {}

/// A class which mocks [TVDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVDetailBloc extends _i1.Mock implements _i2.TVDetailBloc {
  MockTVDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TVDetailState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTVDetailState_0()) as _i2.TVDetailState);
  @override
  _i3.Stream<_i2.TVDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.TVDetailState>.empty())
          as _i3.Stream<_i2.TVDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.TVDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.TVDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>> transformEvents(
          _i3.Stream<_i2.TVDetailEvent>? events,
          _i6.TransitionFunction<_i2.TVDetailEvent, _i2.TVDetailState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>.empty())
          as _i3.Stream<_i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>);
  @override
  void emit(_i2.TVDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.TVDetailEvent>(
          _i6.EventHandler<E, _i2.TVDetailState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.TVDetailState> mapEventToState(_i2.TVDetailEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.TVDetailState>.empty())
          as _i3.Stream<_i2.TVDetailState>);
  @override
  void onTransition(
          _i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>
      transformTransitions(
              _i3.Stream<_i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>.empty())
              as _i3
                  .Stream<_i6.Transition<_i2.TVDetailEvent, _i2.TVDetailState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.TVDetailState> listen(
          void Function(_i2.TVDetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.TVDetailState>())
          as _i3.StreamSubscription<_i2.TVDetailState>);
  @override
  void onChange(_i6.Change<_i2.TVDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TVDetailRecommendationsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVDetailRecommendationsBloc extends _i1.Mock
    implements _i4.TVDetailRecommendationsBloc {
  MockTVDetailRecommendationsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TVDetailRecommendationsState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeTVDetailRecommendationsState_2())
          as _i4.TVDetailRecommendationsState);
  @override
  _i3.Stream<_i4.TVDetailRecommendationsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.TVDetailRecommendationsState>.empty())
          as _i3.Stream<_i4.TVDetailRecommendationsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i4.TVDetailRecommendationsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.TVDetailRecommendationsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>
      transformEvents(
              _i3.Stream<_i4.TVDetailRecommendationsEvent>? events,
              _i6.TransitionFunction<_i4.TVDetailRecommendationsEvent,
                      _i4.TVDetailRecommendationsState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>.empty())
              as _i3.Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>);
  @override
  void emit(_i4.TVDetailRecommendationsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i4.TVDetailRecommendationsEvent>(
          _i6.EventHandler<E, _i4.TVDetailRecommendationsState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i4.TVDetailRecommendationsState> mapEventToState(
          _i4.TVDetailRecommendationsEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.TVDetailRecommendationsState>.empty())
          as _i3.Stream<_i4.TVDetailRecommendationsState>);
  @override
  void onTransition(
          _i6.Transition<_i4.TVDetailRecommendationsEvent,
                  _i4.TVDetailRecommendationsState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>
      transformTransitions(
              _i3.Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>.empty())
              as _i3.Stream<
                  _i6.Transition<_i4.TVDetailRecommendationsEvent, _i4.TVDetailRecommendationsState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i4.TVDetailRecommendationsState> listen(
          void Function(_i4.TVDetailRecommendationsState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i4.TVDetailRecommendationsState>())
          as _i3.StreamSubscription<_i4.TVDetailRecommendationsState>);
  @override
  void onChange(_i6.Change<_i4.TVDetailRecommendationsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TVDetailWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVDetailWatchlistBloc extends _i1.Mock
    implements _i5.TVDetailWatchlistBloc {
  MockTVDetailWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TVDetailWatchlistState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeTVDetailWatchlistState_3())
          as _i5.TVDetailWatchlistState);
  @override
  _i3.Stream<_i5.TVDetailWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.TVDetailWatchlistState>.empty())
          as _i3.Stream<_i5.TVDetailWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.TVDetailWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.TVDetailWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>
      transformEvents(
              _i3.Stream<_i5.TVDetailWatchlistEvent>? events,
              _i6.TransitionFunction<_i5.TVDetailWatchlistEvent,
                      _i5.TVDetailWatchlistState>?
                  transitionFn) =>
          (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>.empty()) as _i3
              .Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>);
  @override
  void emit(_i5.TVDetailWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.TVDetailWatchlistEvent>(
          _i6.EventHandler<E, _i5.TVDetailWatchlistState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.TVDetailWatchlistState> mapEventToState(
          _i5.TVDetailWatchlistEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i5.TVDetailWatchlistState>.empty())
          as _i3.Stream<_i5.TVDetailWatchlistState>);
  @override
  void onTransition(
          _i6.Transition<_i5.TVDetailWatchlistEvent,
                  _i5.TVDetailWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>
      transformTransitions(
              _i3.Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>.empty())
              as _i3.Stream<
                  _i6.Transition<_i5.TVDetailWatchlistEvent, _i5.TVDetailWatchlistState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i5.TVDetailWatchlistState> listen(
          void Function(_i5.TVDetailWatchlistState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i5.TVDetailWatchlistState>())
          as _i3.StreamSubscription<_i5.TVDetailWatchlistState>);
  @override
  void onChange(_i6.Change<_i5.TVDetailWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
