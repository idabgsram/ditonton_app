// Mocks generated by Mockito 5.0.16 from annotations
// in tv_shows/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i20;
import 'dart:typed_data' as _i21;

import 'package:core/core.dart' as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/data/models/movie_table.dart' as _i19;
import 'package:sqflite/sqflite.dart' as _i18;
import 'package:tv_shows/data/datasources/tv_local_data_source.dart' as _i16;
import 'package:tv_shows/data/datasources/tv_remote_data_source.dart' as _i14;
import 'package:tv_shows/data/models/tv_detail_model.dart' as _i3;
import 'package:tv_shows/data/models/tv_episodes_model.dart' as _i5;
import 'package:tv_shows/data/models/tv_model.dart' as _i15;
import 'package:tv_shows/data/models/tv_seasons_model.dart' as _i4;
import 'package:tv_shows/data/models/tv_table.dart' as _i17;
import 'package:tv_shows/domain/entities/tv.dart' as _i10;
import 'package:tv_shows/domain/entities/tv_detail.dart' as _i11;
import 'package:tv_shows/domain/entities/tv_episodes.dart' as _i13;
import 'package:tv_shows/domain/entities/tv_seasons.dart' as _i12;
import 'package:tv_shows/domain/repositories/tv_repository.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeTVDetailResponse_1 extends _i1.Fake implements _i3.TVDetailResponse {
}

class _FakeTVSeasonsResponse_2 extends _i1.Fake
    implements _i4.TVSeasonsResponse {}

class _FakeTVEpisodesModel_3 extends _i1.Fake implements _i5.TVEpisodesModel {}

class _FakeResponse_4 extends _i1.Fake implements _i6.Response {}

class _FakeStreamedResponse_5 extends _i1.Fake implements _i6.StreamedResponse {
}

/// A class which mocks [TVRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVRepository extends _i1.Mock implements _i7.TVRepository {
  MockTVRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> getOnTheAirTVs() =>
      (super.noSuchMethod(Invocation.method(#getOnTheAirTVs, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> getPopularTVs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTVs, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> getTopRatedTVs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTVs, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, _i11.TVDetail>> getTVDetails(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVDetails, [id]),
              returnValue: Future<_i2.Either<_i9.Failure, _i11.TVDetail>>.value(
                  _FakeEither_0<_i9.Failure, _i11.TVDetail>()))
          as _i8.Future<_i2.Either<_i9.Failure, _i11.TVDetail>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> getTVRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVRecommendations, [id]),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, _i12.TVSeasons>> getTVSeasonsDetail(
          int? tvId, int? seasonNumber) =>
      (super.noSuchMethod(
          Invocation.method(#getTVSeasonsDetail, [tvId, seasonNumber]),
          returnValue: Future<_i2.Either<_i9.Failure, _i12.TVSeasons>>.value(
              _FakeEither_0<_i9.Failure, _i12.TVSeasons>())) as _i8
          .Future<_i2.Either<_i9.Failure, _i12.TVSeasons>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, _i13.TVEpisodes>> getTVEpisodesDetail(
          int? tvId, int? seasonNumber, int? epsNumber) =>
      (super.noSuchMethod(
          Invocation.method(
              #getTVEpisodesDetail, [tvId, seasonNumber, epsNumber]),
          returnValue: Future<_i2.Either<_i9.Failure, _i13.TVEpisodes>>.value(
              _FakeEither_0<_i9.Failure, _i13.TVEpisodes>())) as _i8
          .Future<_i2.Either<_i9.Failure, _i13.TVEpisodes>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> searchTVs(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTVs, [query]),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> saveTVWatchlist(
          _i11.TVDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#saveTVWatchlist, [tv]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> removeTVWatchlist(
          _i11.TVDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#removeTVWatchlist, [tv]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<bool> isAddedToTVWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToTVWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>> getWatchlistTVs() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTVs, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i10.TV>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i10.TV>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.TV>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TVRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVRemoteDataSource extends _i1.Mock
    implements _i14.TVRemoteDataSource {
  MockTVRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i15.TVModel>> getOnTheAirTV() =>
      (super.noSuchMethod(Invocation.method(#getOnTheAirTV, []),
              returnValue: Future<List<_i15.TVModel>>.value(<_i15.TVModel>[]))
          as _i8.Future<List<_i15.TVModel>>);
  @override
  _i8.Future<List<_i15.TVModel>> getPopularTV() =>
      (super.noSuchMethod(Invocation.method(#getPopularTV, []),
              returnValue: Future<List<_i15.TVModel>>.value(<_i15.TVModel>[]))
          as _i8.Future<List<_i15.TVModel>>);
  @override
  _i8.Future<List<_i15.TVModel>> getTopRatedTV() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTV, []),
              returnValue: Future<List<_i15.TVModel>>.value(<_i15.TVModel>[]))
          as _i8.Future<List<_i15.TVModel>>);
  @override
  _i8.Future<_i3.TVDetailResponse> getTVDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVDetail, [id]),
              returnValue:
                  Future<_i3.TVDetailResponse>.value(_FakeTVDetailResponse_1()))
          as _i8.Future<_i3.TVDetailResponse>);
  @override
  _i8.Future<List<_i15.TVModel>> getTVRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVRecommendations, [id]),
              returnValue: Future<List<_i15.TVModel>>.value(<_i15.TVModel>[]))
          as _i8.Future<List<_i15.TVModel>>);
  @override
  _i8.Future<_i4.TVSeasonsResponse> getTVSeasonsDetail(
          int? tvId, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getTVSeasonsDetail, [tvId, seasonNumber]),
              returnValue: Future<_i4.TVSeasonsResponse>.value(
                  _FakeTVSeasonsResponse_2()))
          as _i8.Future<_i4.TVSeasonsResponse>);
  @override
  _i8.Future<_i5.TVEpisodesModel> getTVEpisodesDetail(
          int? tvId, int? seasonNumber, int? epsNumber) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getTVEpisodesDetail, [tvId, seasonNumber, epsNumber]),
              returnValue:
                  Future<_i5.TVEpisodesModel>.value(_FakeTVEpisodesModel_3()))
          as _i8.Future<_i5.TVEpisodesModel>);
  @override
  _i8.Future<List<_i15.TVModel>> searchTV(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTV, [query]),
              returnValue: Future<List<_i15.TVModel>>.value(<_i15.TVModel>[]))
          as _i8.Future<List<_i15.TVModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TVLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVLocalDataSource extends _i1.Mock implements _i16.TVLocalDataSource {
  MockTVLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> insertTVWatchlist(_i17.TVTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertTVWatchlist, [tv]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> removeTVWatchlist(_i17.TVTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeTVWatchlist, [tv]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i17.TVTable?> getTVById(int? id) => (super.noSuchMethod(
      Invocation.method(#getTVById, [id]),
      returnValue: Future<_i17.TVTable?>.value()) as _i8.Future<_i17.TVTable?>);
  @override
  _i8.Future<List<_i17.TVTable>> getWatchlistTVs() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTVs, []),
              returnValue: Future<List<_i17.TVTable>>.value(<_i17.TVTable>[]))
          as _i8.Future<List<_i17.TVTable>>);
  @override
  _i8.Future<void> cacheTVs(List<_i17.TVTable>? tvs, String? categories) =>
      (super.noSuchMethod(Invocation.method(#cacheTVs, [tvs, categories]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i17.TVTable>> getCachedTVs(String? categories) =>
      (super.noSuchMethod(Invocation.method(#getCachedTVs, [categories]),
              returnValue: Future<List<_i17.TVTable>>.value(<_i17.TVTable>[]))
          as _i8.Future<List<_i17.TVTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i9.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i18.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i18.Database?>.value())
          as _i8.Future<_i18.Database?>);
  @override
  dynamic setDatabase(_i18.Database? database) =>
      super.noSuchMethod(Invocation.method(#setDatabase, [database]));
  @override
  _i8.Future<int> insertWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> insertTVWatchlist(_i17.TVTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertTVWatchlist, [tv]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeTVWatchlist(_i17.TVTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeTVWatchlist, [tv]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);
  @override
  _i8.Future<Map<String, dynamic>?> getTVById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlistTV() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTV, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<void> insertCacheTransaction(
          List<_i19.MovieTable>? movies, String? category) =>
      (super.noSuchMethod(
          Invocation.method(#insertCacheTransaction, [movies, category]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getCacheMovies(String? category) =>
      (super.noSuchMethod(Invocation.method(#getCacheMovies, [category]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<int> clearCache(String? category) =>
      (super.noSuchMethod(Invocation.method(#clearCache, [category]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<void> insertTVCacheTransaction(
          List<_i17.TVTable>? tvs, String? category) =>
      (super.noSuchMethod(
          Invocation.method(#insertTVCacheTransaction, [tvs, category]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getTVCache(String? category) =>
      (super.noSuchMethod(Invocation.method(#getTVCache, [category]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<int> clearTVCache(String? category) =>
      (super.noSuchMethod(Invocation.method(#clearTVCache, [category]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i20.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i20.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i20.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i20.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i21.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i21.Uint8List>.value(_i21.Uint8List(0)))
          as _i8.Future<_i21.Uint8List>);
  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5()))
          as _i8.Future<_i6.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
